#!/usr/bin/env python

import subprocess,requests,time,threading,os,sys
from multiprocessing import Process


agentname='Morg'
os.environ['HPCAGENT']=agentname
# file replication module
from hpcclient import *
from hpcclient.th_pipe2post import th_pipe2post
from hpcclient.config import couchinfo
#from hpcclient.config import msgintf

bashout=''
proc=dict()
pid=0
me=config.ME
user=os.environ['USER']

submitformkey=set(["job_type","job_name","output","input","error","shell","wall_clock_limit","notification","notify_user","bg_size","bg_connectivity","account_no","environment","comment","arguments","step_name","initialdir","requirements","restart","shell"])
runjobkey=set(["np","stdinrank","raise","python","mpi"])
resources=set(["ncpus","select","mpiprocs","ompthreads","mem"])

AGENTSERVER=config.POSTSERVER

SHELL=os.environ['SHELL']
#SHELL='/bin/bash'
SHELLSCRIPT='./bashpty'
STDOUT='cat'
FIFO='.agentfifo'

class th_popandexec(threading.Thread):
    import io,os,requests,time
    import xmlrpclib,subprocess,sys
    from hpcclient import myxattr as xattr
 
    def getagentvars(self,res,*arg,**kwargs):
	couchinfo(res)
    def __init__(self,id,sessionid):
        super(th_popandexec,self).__init__()
        self.qid=id
	self.sessionid=sessionid
	#if (not id):
	#	self.requests.get("http://127.0.0.1:5984/agents/{0}".format(self.name),hooks=dict(response=self.agentvars))
        self.updaterev=0
        #TODO get shell from db
	self.rout, self.wout=self.os.pipe()
	self.rerr, self.werr=self.os.pipe()
	self.rfdout,self.wfdout=self.io.open(self.rout,'rb',0),os.fdopen(self.wout,'wb',0)
	self.rfderr,self.wfderr=self.io.open(self.rerr,'rb',0),os.fdopen(self.werr,'wb',0)
	self.shell=self.subprocess.Popen([SHELL],stdin=self.subprocess.PIPE,stdout=self.wfdout,stderr=self.wfderr,shell=True)

 	#self.stdout=self.subprocess.Popen([STDOUT,FIFO],stdin=None,stdout=self.	

	self.outtopost=th_pipe2post(AGENTSERVER,self.rfdout,sessionid,'stdout',bufsize=4000)
	self.errtopost=th_pipe2post(AGENTSERVER,self.rfderr,sessionid,'stderr',bufsize=4000)	


    def printexception(self,msg,e):
	couchinfo("popandexec exception:{0} {1}".format(msg,e))

    def run(self):
        self.outtopost.start()
        self.errtopost.start()
        self.fetch()
        self.killme()
        #self.execute()

    def chunckres(self,r,*args,**kwargs):
	#print r.content
    	self.requests.post('{0}/commands/_design/schedule/_update/next/{1}'.format(AGENTSERVER,self.sessionid),data=None,hooks=dict(response=self.route))
    def fetch(self):
	# verify for session stdin input
       	try:	
            while True: self.requests.get('{0}/commands/_changes?id={1}&dst={3}&rev={2}&filter=schedule/session&feed=longpoll&heartbeat=5000&since=now'.format(AGENTSERVER,self.sessionid,self.updaterev,'tommaso'),stream=False,hooks=dict(response=self.chunckres))
        except Exception as e: self.printexception("fetch",e)

    def do(self,linein):
        couchinfo('do it')
        for p in self.param: linein+='{0} '.format(p)
        try: 
            #maybe shell in crashed
            self.shell.stdin.writelines(linein+'\n')
        except Exception as e:
            self.printexception("do",e)
            self.killme()

        self.updateresp=self.requests.post('{0}/commands/_design/schedule/_update/next/{1}'.format(AGENTSERVER,self.sessionid),data=None)

    def execute(self):
        couchinfo('execute')
        line=''
        return self.do(line)
    def domethod(self):
        couchinfo('domethod')
        line='{0} '.format(self.method)
        return self.do(line)
    #utility function for simple runjob submit
    def runjob(self):
        param=self.param[0]
        couchinfo('job {0}'.format(set(param.keys())))
        envparam=submitformkey.intersection(set(param.keys()))
        runjobparam=runjobkey.intersection(set(param.keys()))
    	resourceparam=resources.intersection(set(param.keys()))
        #moduleparam=set(param['module'])
	
        #generate batch script for PBS standard
        #resources
        resl=['{0}={1}'.format(k,param[k]) for k in resourceparam]
        lbuf='#PBS -l '
	while len(resl)>0: lbuf=lbuf+resl.pop()+':'
	
	lla=['']
	lla.append(lbuf[:-1])
	lla.append('#PBS -l walltime={0}'.format(param['walltime']))
	#account
	lla.append('#PBS -A {0}'.format(param['account']))
        #environment
    	lla.append('#PBS -N {0}'.format(param['job_name']))
        #variables
   	#lla.append('#PBS -d {0}'.format(param['initialdir'])) 
        #mail
    	lla.append('#PBS -m {0}'.format(param['notification']))
    	lla.append('#PBS -M {0}'.format(param['mail']))
        #stdio
    	lla.append('#PBS -o {0}'.format(param['initialdir']))
    	lla.append('#PBS -e {0}'.format(param['initialdir']))
        #other
	
        rja=['-{0} {1}'.format(k,param[k]) for k in runjobparam]
        buffer='#!/bin/bash\n'
        while len(lla)>0: buffer=buffer+lla.pop()+'\n'
        #buffer=buffer+'#@ queue\n'
        if param.has_key('modules'):
            for m in param['modules']:
                buffer=buffer+'module load '+m+'\n'
	#buffer=buffer+'module load args\n'
	# insert runjob for computation node execute
	#buffer=buffer+'nrniv '
	buffer=buffer+param['engine']+' '
	# insert dll for mech selection
        while len(rja)>0: buffer=buffer+rja.pop()+' '
	buffer=buffer+param['exe']+' '
        if param.has_key('args'):
            for arg in param['args']: buffer=buffer+' '+arg+' '
            buffer=buffer+'\n'
        with open('web.job','w') as file: file.write(buffer)

	
	submit=self.subprocess.Popen(['qsub','web.job'],stdout=self.subprocess.PIPE)
	result=submit.communicate()[0]
	#send to couchdb jobid or error to display
	couchinfo('qsub response:{0}'.format(result))
	##res=requests.post('{0}/users/_design/jobs/_update/batch/{1}'.format(AGENTSERVER,user),data=@open('web.job','r'))
	res=requests.post('{0}/users/_design/jobs/_update/submit/{1}'.format(AGENTSERVER,user),data=result)

        return
    def qselect(self):
        qselect=self.subprocess.Popen(['qselect','-xu','{0}'.format(me)],stdout=self.subprocess.PIPE)
        result=qselect.communicate()[0]
        #couchinfo('qselect response:{0}'.format(result))
        res=requests.post('{0}/users/_design/jobs/_update/history/{1}'.format(AGENTSERVER,user),data=result)
        return
    def fullstat(self):
        #qselect=self.subprocess.Popen(['qselect','-xu','{0}'.format(me)],stdout=self.subprocess.PIPE)
        couchinfo('fullstat for '+self.param[0])
	qstat=self.subprocess.Popen(['qstat','-x','-f',self.param[0]],stdout=self.subprocess.PIPE)
        result=qstat.communicate()[0]
        couchinfo('qstat response:{0}'.format(result))
        res=requests.post('{0}/users/_design/jobs/_update/fullstat/{1}'.format(AGENTSERVER,user),data=result)
        return
    def restart(self):
        couchinfo('execute restart from main thread')
        return
    def signal(self):
        couchinfo('send singnal to shell')
        return
    def killme(self):
        self.pid=self.os.getpid()
        couchinfo('kill myself pid:{0}'.format(self.pid))
        self.os.system("kill -9 {0}".format(self.pid))
	#me=th[self.sessionid].currentThread()
	#me.exit()

    def pyexec(self):
    	linein=''
	for p in self.param:
            linein+='{0} '.format(p)
        try:
            exec(linein)
	    res='pyexec'
        except Exception as e:
            self.printexception("pyexec",e)
        #self.requests.post('{0}/commands/_design/schedule/_update/post/{1}'.format(AGENTSERVER,sessionid),data=res)

    def __dir__(self):
        res=[a for a in dir(self) if not a.startswith('__')]
        couchinfo(res)


    def route(self,recv,*args,**kwargs):
        try:
	    couchinfo(recv)
	    buffer=recv.content
	    if (len(buffer)<2):	return
            couchinfo('xmlrpc: {0} '.format(buffer))
	    self.param,self.method=self.xmlrpclib.loads(buffer)
            func=getattr(self,self.method,self.domethod)
            func()
	except Exception as e:
	    self.printexception("route exception",e)	



def createthread(sessionid):
    couchinfo("create thread for id {0}".format(sessionid))
    th=th_popandexec(0,sessionid)
    th.start()
    th.join()

	
def createprocess(resp,*arg,**kwarg):
    json=eval(resp.content)
    couchinfo(json)    
    for key in json.get('sessions'):
        if not key in proc:
                proc[key]=Process(target=createthread,args=(key,))
                proc[key].start()
        else:
                if proc[key].is_alive():
                        couchinfo("process {0} is alive".format(key))
                else:
                        couchinfo("process {0} is dead".format(key))

    res=0
    for key in json.get('sessions'):
        res+=proc[key].is_alive()
    if(res==0):
        couchinfo('no active sessions: suicide!')
        os.system("kill -9 {0}".format(os.getpid()))


def runagent():
    pid=os.getpid()
    couchinfo('start agent services')
    while True:
        requests.post('{0}/agents/_design/heartbeat/_update/agent/{1}'.format(AGENTSERVER,agentname),hooks=dict(response=createprocess))
        qstat=subprocess.Popen(['qstat','-T','-x','-u','{0}'.format(user)],stdout=subprocess.PIPE)
        result=qstat.communicate()[0]
        res=requests.post('{0}/users/_design/jobs/_update/jobqueue/{1}'.format(AGENTSERVER,user),data=result)
        localdir=os.listdir(config.DEFAULTFOLDER)
	res=requests.get('{0}/folders/{1}'.format(AGENTSERVER,'webfolder'))
	obj=res.content.replace('true','True').replace('false','False')
	stats=eval(obj)['stats']
	remotedir=[file for file in stats]
	diff=[file for file in localdir if file not in remotedir]
	for file in diff:
		if 'user.author' not in xattr.listxattr('{0}/{1}'.format(config.DEFAULTFOLDER,file)):
			with open ('{0}/{1}'.format(config.DEFAULTFOLDER,file),'a'):
				os.utime('{0}/{1}'.format(config.DEFAULTFOLDER,file),None)
		else:
			os.unlink('{0}/{1}'.format(config.DEFAULTFOLDER,file))
	time.sleep(6)

if __name__=="__main__":
    runagent()


